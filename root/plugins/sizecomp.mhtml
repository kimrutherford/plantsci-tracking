<%args>
$object
</%args>

<%doc>
This component shows composition statistics and graphs.
</%doc>

<script type="text/javascript">
    $(function() {
        $("#tabs").tabs();
    });

    $(function() {
        $('.inlinesparkline').sparkline('html', {type: 'bar', barSpacing: 0,
                  barWidth: 1, barColor: '#d00'}); 
    });
</script>

<div class="sect">
<span class="sect-title undisclosed-title">
  <a href="#">Base composition and size distribution graphs and statistics</a>
</span>
<div class="sect-content" id="tabs">
  <ul>
    <li><a href="#tabs-stats">Sequence statistics</a></li>
%   for my $graph_name (@graph_names) {
%     my $data = $graphs{$graph_name};
%     next unless defined $data;
%     my $pipedata = $data->{pipedata};
%     my $sparkline_vals = get_sparkline_values($c, $pipedata);
    <li><a href="#tabs-<% $pipedata->pipedata_id() %>">
        <% $graph_name %>
        <span class="inlinesparkline"><% $sparkline_vals %></span>
    </a></li>
%   }
  </ul>
  <div id="tabs-stats">
    <& /plugins/readstats.mhtml, object => $object &>
  </div>
<%perl>
   for my $graph_name (@graph_names) {
     warn " graph: $graph_name\n";
     my $data = $graphs{$graph_name};
     next unless defined $data;
     my $pipedata = $data->{pipedata};
     my $definition = $data->{definition};
     my $pipedata_id = $pipedata->pipedata_id();
</%perl>
  <div id="tabs-<% $pipedata_id %>">
    <div><% $definition %></div>
    <img src='<% $c->uri_for("/plugin/graph/sizedist", $pipedata->pipedata_id()) %>'/>
    <div>
      <a href='<% $c->uri_for("/plugin/sizedist/tsv", $pipedata_id) %>'>
        <span style="font-size: 75%">Download raw numbers ...</span>
      </a>
    </div>
  </div>
<%perl>
   }
</%perl>

</div>
</div>

<%init>
my $schema = $c->schema();
my $content_type = $schema->find_with_type('Cvterm', 'name', 'first_base_summary');
my @pipedatas = $object->pipedatas()->search({content_type => $content_type->cvterm_id()});
my %graphs = ();

my @graph_names = ('All reads after trimming',
                   'Size filtered reads',
                   'Non-redundant reads',
                   'Genome aligned reads',
                   'Redundant genome aligned reads',
                   'Reads that did not align',
                  );

sub get_sparkline_values
{
  my $c = shift;
  my $pipedata = shift;

  my ($counts_ref, $min, $max) = 
    SmallRNA::Web::Controller::Plugin::SizeDistGraph::get_pipedata_counts($c->config(), $pipedata); 

  my %counts = %$counts_ref;
  my @lengths = (15 .. $max);

  my @total_counts = (0) x @lengths;

  for my $length (@lengths) {
    for my $base (qw(A T C G)) {
      if (defined $counts{$length}{$base}) {
        $total_counts[$length] += $counts{$length}{$base};
      }
    }
  }

  return join ',', @total_counts;
}

for my $pipedata (@pipedatas) {
  my @input_pipedatas = $pipedata->generating_pipeprocess()->input_pipedatas();
  if (@input_pipedatas) {
    my $content_type = $input_pipedatas[0]->content_type();
    my $content_type_name = $content_type->name();
    my $content_type_def = $content_type->definition();
    if ($content_type_name eq 'srna_reads') {
      $graphs{'All reads after trimming'} = {
        pipedata => $pipedata,
        definition => $content_type_def,
      }
    } else {
      if ($content_type_name =~ /^redundant_genome_aligned/) {
        $graphs{'Redundant genome aligned reads'} = {
           pipedata => $pipedata,
           definition => $content_type_def,
        }
      } else {
        if ($content_type_name eq 'non_redundant_srna_reads') {
          $graphs{'Non-redundant reads'} = {
            pipedata => $pipedata,
            definition => $content_type_def,
          }
        } else {
          if ($content_type_name eq 'genome_aligned_srna_reads') {
            $graphs{'Genome aligned reads'} = {
              pipedata => $pipedata,
              definition => $content_type_def,
            }
          } else {
            if ($content_type_name eq 'non_genome_aligned_srna_reads') {
              $graphs{'Reads that did not align'} = {
                pipedata => $pipedata,
                definition => $content_type_def,
              }
            } else {
              if ($content_type_name eq 'filtered_srna_reads') {
                $graphs{'Size filtered reads'} = {
                  pipedata => $pipedata,
                  definition => $content_type_def,
                }
              }
            }
          }
        }
      }
    }
  }
}
</%init>

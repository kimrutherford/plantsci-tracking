<%args>
$object
$name
</%args>

<%doc>
This component shows composition statistics and graphs.
</%doc>

<script type="text/javascript">
    $(function() {
        $("#seq-comp-tabs").tabs();
    });
</script>

<div class="sect">
<span class="sect-title disclosed-title">
  <a href="#"><% $name %></a>
</span>
<div class="sect-content tracking-tabs" id="seq-comp-tabs">
  <ul>
    <li><a href="#seq-comp-tabs-stats">Sequence statistics</a></li>
% if (defined $fastq_pipedata) {
    <li><a href="#seq-comp-tabs-n-mers">Top n-mers in FastQ file</a></li>
% }
  </ul>

  <div id="seq-comp-tabs-stats">
% if (@stats > 0) {
<table class="list">
  <thead>
    <tr>
% if ($c->user_exists() && $c->user()->role()->name() eq 'admin') {
      <td>
        Content type
      </td>
% }
      <td>
        Description
      </td>
      <td style="white-space: nowrap;">
        Number of sequences
      </td>
      <td style="white-space: nowrap;">
        Total bases
      </td>
      <td style="white-space: nowrap;">
        G+C bases
      </td>
      <td style="white-space: nowrap;">
        G+C percentage
      </td>
    </tr>
  </thead>
  <tbody>
% my $row_count = 0;
% use Number::Format;
% my $fmt = Number::Format->new();
% for my $stat (@stats) {
    <tr class="<% $row_count % 2 == 0 ? 'even' : 'odd' %>">
% if ($c->user_exists() && $c->user()->role()->name() eq 'admin') {
    <td>
      <% $stat->{content_type} %>
    </td>
% }
    <td>
      <% $stat->{label} %>
    </td>
    <td>
      <% $fmt->format_number($stat->{data}->{number_of_sequences}) %>
    </td>
    <td>
      <% $fmt->format_number($stat->{data}->{total_bases}) %>
    </td>
    <td>
      <% $fmt->format_number($stat->{data}->{gc_bases}) %>
    </td>
    <td>
      <% $stat->{data}->{gc_content} %>
    </td>
  </tr>
%   $row_count++
% }
  </tbody>
</table>
% } else {
  No statistics available
% }

  </div>

% if (defined $fastq_pipedata) {
  <div id="seq-comp-tabs-n-mers">
    <& /plugins/pipedata_details.mhtml, object => $fastq_pipedata &>
  </div>
% }

</div>
</div>

<%init>
my $schema = $c->schema();

my $fastq_pipedata = undef;

my $fast_stats_type = $schema->find_with_type('Cvterm', 'name', 'fast_stats');

my $query = { content_type => $fast_stats_type->cvterm_id() };
my @pipe_datas = $object->pipedatas()->search($query);
my $pipe_data_id = undef;

my @stats = ();

my $data_directory = $c->config()->data_directory();

for my $fast_stat_pipe_data (@pipe_datas) {
  my @input_pipedatas = $fast_stat_pipe_data->generating_pipeprocess()->input_pipedatas()
                               ->search({}, { prefetch => [qw(content_type format_type)] });
  if (@input_pipedatas) {
    my $input_pipedata = $input_pipedatas[0];
    my $content_type = $input_pipedata->content_type();
    my $content_type_name = $content_type->name();

    my $fast_pipedata = $input_pipedatas[0];

    if ($content_type_name eq 'raw_reads') {
      if ($input_pipedata->format_type()->name() eq 'fasta') {
        my $generating_process = $input_pipedata->generating_pipeprocess();
        if (defined $generating_process) {
          my @possible_fastqs = $generating_process->input_pipedatas();
          for my $possible_fastq (@possible_fastqs) {
            if ($possible_fastq->format_type()->name eq 'fastq') {
              $fastq_pipedata = $possible_fastq;
            }
          }
        }
      }
    }

    my $fast_file_name = $data_directory . '/' . $fast_stat_pipe_data->file_name();
    my @alignment_gff3_pipedata = $fast_pipedata->generating_pipeprocess()->input_pipedatas();

    my @gff3_pipedata_properties = map { $_->pipedata_properties() } @alignment_gff3_pipedata;

    # ignore fasta from alignments that aren't patman versus genome
    next if (grep { $_->type()->name() eq 'alignment program' &&
                    $_->value() ne 'patman' } @gff3_pipedata_properties);

    next if (grep { $_->type()->name() eq 'alignment component' &&
                    $_->value() ne 'genome' } @gff3_pipedata_properties);

    # "fast" = fasta or fastq
    my %fast_data = ();

    open my $file, '<', $fast_file_name
      or die "can't open $fast_file_name: $!\n";

    while (defined (my $line = <$file>)) {
      if ($line =~ /(.*):\s*(.*?)\s*$/) {
        $fast_data{$1} = $2;
      }
    }

    if ($fast_data{total_bases} > 0) {
      my $gc_content = 100.0 * $fast_data{gc_bases} / $fast_data{total_bases};
      $fast_data{gc_content} = sprintf "%3.2f", $gc_content;
    } else {
      $fast_data{gc_content} = 'N/A'
    }

    my $content_type_def = $fast_pipedata->content_type()->definition();

    if (!grep { $_->{label} eq $content_type_def} @stats) {
      push @stats, { fast_pipedata => $fast_stat_pipe_data,
                     data => \%fast_data,
                     label => $content_type_def,
                     content_type => $fast_pipedata->content_type()->name(),
                     };
    }

    close $file or die "can't close $file: $!\n";
  }
}

@stats = sort { 
  $b->{data}->{number_of_sequences} <=> $a->{data}->{number_of_sequences} 
} @stats;


</%init>

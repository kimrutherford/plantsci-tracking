<%args>
$object
</%args>

% if (@stats > 0) {
<table class="list">
  <thead>
    <tr>
% if ($c->user_exists() && $c->user()->role()->name() eq 'admin') {
      <td>
        Content type
      </td>
% }
      <td>
        Description
      </td>
      <td style="white-space: nowrap;">
        Number of sequences
      </td>
      <td style="white-space: nowrap;">
        Total bases
      </td>
      <td style="white-space: nowrap;">
        G+C bases
      </td>
      <td style="white-space: nowrap;">
        G+C percentage
      </td>
    </tr>
  </thead>
  <tbody>
% my $row_count = 0;
% use Number::Format;
% my $fmt = Number::Format->new();
% for my $stat (@stats) {
    <tr class="<% $row_count % 2 == 0 ? 'even' : 'odd' %>">
% if ($c->user_exists() && $c->user()->role()->name() eq 'admin') {
    <td>
      <% $stat->{content_type} %>
    </td>
% }
    <td>
      <% $stat->{label} %>
    </td>
    <td>
      <% $fmt->format_number($stat->{data}->{number_of_sequences}) %>
    </td>
    <td>
      <% $fmt->format_number($stat->{data}->{total_bases}) %>
    </td>
    <td>
      <% $fmt->format_number($stat->{data}->{gc_bases}) %>
    </td>
    <td>
      <% $stat->{data}->{gc_content} %>
    </td>
  </tr>
%   $row_count++
% }
  </tbody>
</table>
% } else {
  No statistics available
% }


<%init>
my $schema = $c->schema();
my $fast_stats_type = $schema->find_with_type('Cvterm', 'name', 'fast_stats');

my $query = { content_type => $fast_stats_type->cvterm_id() };
my @pipe_datas = $object->pipedatas()->search($query);
my $pipe_data_id = undef;

my @stats = ();

my $data_directory = $c->config()->data_directory();

for my $fast_stat_pipe_data (@pipe_datas) {
  my @input_pipedatas = $fast_stat_pipe_data->generating_pipeprocess()->input_pipedatas();
  if (@input_pipedatas) {

    my $fast_pipedata = $input_pipedatas[0];

    my $fast_file_name = $data_directory . '/' . $fast_stat_pipe_data->file_name();
    my @alignment_gff3_pipedata = $fast_pipedata->generating_pipeprocess()->input_pipedatas();

    my @gff3_pipedata_properties = map { $_->pipedata_properties() } @alignment_gff3_pipedata;

    # ignore fasta from alignments that aren't patman versus genome
    next if (grep { $_->type()->name() eq 'alignment program' &&
                    $_->value() ne 'patman' } @gff3_pipedata_properties);

    next if (grep { $_->type()->name() eq 'alignment component' &&
                    $_->value() ne 'genome' } @gff3_pipedata_properties);

    # "fast" = fasta or fastq
    my %fast_data = ();

    open my $file, '<', $fast_file_name
      or die "can't open $fast_file_name: $!\n";

    while (defined (my $line = <$file>)) {
      if ($line =~ /(.*):\s*(.*?)\s*$/) {
        $fast_data{$1} = $2;
      }
    }

    if ($fast_data{total_bases} > 0) {
      my $gc_content = 100.0 * $fast_data{gc_bases} / $fast_data{total_bases};
      $fast_data{gc_content} = sprintf "%3.2f", $gc_content;
    } else {
      $fast_data{gc_content} = 'N/A'
    }

    my $content_type_def = $fast_pipedata->content_type()->definition();

    if (!grep { $_->{label} eq $content_type_def} @stats) {
      push @stats, { fast_pipedata => $fast_stat_pipe_data,
                     data => \%fast_data,
                     label => $content_type_def,
                     content_type => $fast_pipedata->content_type()->name(),
                     };
    }

    close $file or die "can't close $file: $!\n";
  }
}

@stats = sort { 
  $b->{data}->{number_of_sequences} <=> $a->{data}->{number_of_sequences} 
} @stats;

</%init>
